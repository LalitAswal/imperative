// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AbstractRestClient tests should error when chunking JSON data that does not parse 1`] = `
"The get request appeared to succeed, but the response was not in the expected format:
Unexpected end of JSON input"
`;

exports[`AbstractRestClient tests should error when chunking JSON data that does not parse and allow post payload 1`] = `
"The post request appeared to succeed, but the response was not in the expected format:
Unexpected end of JSON input"
`;

exports[`AbstractRestClient tests should error when chunking JSON data that does not parse and allow post payload 2`] = `undefined`;

exports[`AbstractRestClient tests should error with request rejection when status code is not in 200 range 1`] = `"Rest API failure with HTTP(S) status 400"`;

exports[`AbstractRestClient tests should error with request rejection when status code is not in 200 range 2`] = `"400"`;

exports[`AbstractRestClient tests should error with request rejection when status code is not in 200 range 3`] = `"{\\"newData\\":\\"response data\\"}"`;

exports[`AbstractRestClient tests should error with request rejection when status code is not in 200 range 4`] = `
"HTTP(S) error status \\"400\\" received.
Review request details (resource, base path, credentials, payload) and ensure correctness.

Host:      test
Port:      443
Base Path: 
Resource:  /resource
Request:   PUT
Headers:   [{\\"My-Header\\":\\"value is here\\"}]
Payload:   { 'my payload object': 'hello' }"
`;

exports[`AbstractRestClient tests should give an error message when error event is called 1`] = `"http(s) request error event called"`;

exports[`AbstractRestClient tests should give an error when no resource URI is provided 1`] = `"Expect Error: Required parameter 'resource' must not be blank"`;

exports[`AbstractRestClient tests should give an error when no session is provided 1`] = `"Expect Error: Required object must be defined"`;

exports[`AbstractRestClient tests should not append any headers to a request by default 1`] = `
Array [
  "Test",
]
`;

exports[`AbstractRestClient tests should not append any headers to a request by default 2`] = `Array []`;

exports[`AbstractRestClient tests should not error when chunking data and payload data are present in outgoing request 1`] = `
Object {
  "newData": "response data",
}
`;

exports[`AbstractRestClient tests should not error when data and end events are sent 1`] = `"Sample data"`;

exports[`AbstractRestClient tests should not error when headers and payload data are present in outgoing request 1`] = `
Object {
  "newData": "response data",
}
`;

exports[`AbstractRestClient tests should return full response when requested 1`] = `
Object {
  "data": Object {
    "data": Array [
      83,
      97,
      109,
      112,
      108,
      101,
      32,
      100,
      97,
      116,
      97,
    ],
    "type": "Buffer",
  },
  "dataString": "Sample data",
  "log": Logger {
    "category": "imperative",
    "initStatus": false,
    "mJsLogger": Logger {
      "category": "imperative",
      "context": Object {},
    },
  },
  "requestFailure": false,
  "requestSuccess": true,
  "response": MockHttpRequestResponse {
    "_events": Object {
      "data": [Function],
      "end": [Function],
    },
    "_eventsCount": 2,
    "_maxListeners": undefined,
    "mStatus": "200",
  },
  "session": Session {
    "mISession": Object {
      "basePath": "",
      "hostname": "test",
      "port": 443,
      "protocol": "https",
      "rejectUnauthorized": true,
      "secureProtocol": "SSLv23_method",
      "strictSSL": true,
      "type": "none",
    },
    "mLog": Logger {
      "category": "imperative",
      "initStatus": false,
      "mJsLogger": Logger {
        "category": "imperative",
        "context": Object {},
      },
    },
  },
}
`;

exports[`AbstractRestClient tests should return one part of response when requested 1`] = `
Object {
  "response": MockHttpRequestResponse {
    "_events": Object {
      "data": [Function],
      "end": [Function],
    },
    "_eventsCount": 2,
    "_maxListeners": undefined,
    "mStatus": "200",
  },
}
`;

exports[`AbstractRestClient tests should return several parts of response when requested 1`] = `
Object {
  "data": Object {
    "data": Array [
      83,
      97,
      109,
      112,
      108,
      101,
      32,
      100,
      97,
      116,
      97,
    ],
    "type": "Buffer",
  },
  "requestSuccess": true,
  "response": MockHttpRequestResponse {
    "_events": Object {
      "data": [Function],
      "end": [Function],
    },
    "_eventsCount": 2,
    "_maxListeners": undefined,
    "mStatus": "200",
  },
}
`;
